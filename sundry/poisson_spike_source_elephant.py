"""
Recording the spikes generated by the on-chip Poisson
spike source to analyse and compare it to ones generated by
Elephant
"""
from __future__ import print_function
import spynnaker8 as p
from pyNN.utility.plotting import Figure, Panel
import matplotlib.pyplot as plt
import matplotlib as mlib
from elephant.spike_train_generation import homogeneous_poisson_process
from elephant.statistics import mean_firing_rate, cv2, fanofactor, isi
from quantities import Hz, ms
from copy import deepcopy as deepcopy
import numpy as np

# ensure we use viridis as the default cmap
plt.viridis()

# ensure we use the same rc parameters for all matplotlib outputs
mlib.rcParams.update({'font.size': 24})
mlib.rcParams.update({'errorbar.capsize': 5})
mlib.rcParams.update({'figure.autolayout': True})

# on with the simulation

runtime = 10000
desired_rate = 20
p.setup(timestep=1.0, min_delay=1.0, max_delay=144.0)
n_neurons = 500  # number of neurons in each population
p.set_number_of_neurons_per_core(p.IF_curr_exp, n_neurons / 2)

cell_params_lif = {'cm': 0.25,
                   'i_offset': 0.0,
                   'tau_m': 20.0,
                   'tau_refrac': 2.0,
                   'tau_syn_E': 5.0,
                   'tau_syn_I': 5.0,
                   'v_reset': -70.0,
                   'v_rest': -65.0,
                   'v_thresh': -50.0
                   }


weight_to_spike = 1.0
delay = 1

pss_params = {'rate': desired_rate,
              'start': 0,
              'duration': runtime}
noise_pop = p.Population(n_neurons,
                         p.SpikeSourcePoisson(**pss_params),
                         label="Poisson Spike Source")

target_pop = p.Population(n_neurons,
                          p.IF_curr_exp(**cell_params_lif),
                          label='Ignore Population')

projection = p.Projection(
    noise_pop, target_pop, p.FixedProbabilityConnector(0.1),
    p.StaticSynapse(weight=weight_to_spike, delay=delay))

noise_pop.record(['spikes'])

p.run(runtime)

# get spikes
spinnaker_spikes = noise_pop.get_data('spikes')

elephant_spiketrains = []
for nid in range(n_neurons):
    elephant_spiketrains.append(homogeneous_poisson_process(desired_rate*Hz, 0*ms, runtime*ms))

print("{:45}".format("Stats!"))
spinnaker_isis = []
spinnaker_cvs = []
spinnaker_mfr = []
spinnaker_ffs = []
for st in spinnaker_spikes.segments[0].spiketrains:
    current_st_isi = isi(st)
    current_st_mean_firing_rate = mean_firing_rate(st)
    spinnaker_isis.append(current_st_isi/ms)
    spinnaker_mfr.append(current_st_mean_firing_rate)
    spinnaker_cvs.append(cv2(current_st_isi))
spinnaker_ffs.append(fanofactor(spinnaker_spikes.segments[0].spiketrains))


elephant_isis = []
elephant_cvs = []
elephant_mfr = []
elephant_ffs = []
for st in elephant_spiketrains:
    current_st_isi = isi(st)
    current_st_mean_firing_rate = mean_firing_rate(st)
    elephant_isis.append(current_st_isi/ms)
    elephant_mfr.append(current_st_mean_firing_rate)
    elephant_cvs.append(cv2(current_st_isi))
elephant_ffs.append(fanofactor(elephant_spiketrains))

# convert lists to np arrays
spinnaker_mfr = np.asarray(spinnaker_mfr)
elephant_mfr = np.asarray(elephant_mfr)

spinnaker_isis = np.asarray(spinnaker_isis)
elephant_isis = np.asarray(elephant_isis)

spinnaker_cvs = np.asarray(spinnaker_cvs)
elephant_cvs = np.asarray(elephant_cvs)

spinnaker_ffs = np.asarray(spinnaker_ffs)
elephant_ffs = np.asarray(elephant_ffs)

# print("{:45}".format("SpiNNaker ISIs"), ":", spinnaker_isis)
# print("{:45}".format("Elephant ISIs"), ":", elephant_isis)
print("{:45}".format("Firing rate"))
print("{:45}".format("Prescribed mean firing rate"), ":", desired_rate)
print("{:45}".format("SpiNNaker mean firing rate"), ":", 1000 * np.mean(spinnaker_mfr.ravel()))
print("{:45}".format("SpiNNaker mean firing rate std"), ":", np.std(spinnaker_mfr.ravel()))
print("{:45}".format("Elephant mean firing rate"), ":", 1000 * np.mean(elephant_mfr.ravel()))
print("{:45}".format("Elephant mean firing rate std"), ":", np.std(elephant_mfr.ravel()))

spinnaker_isis = spinnaker_isis / ms
elephant_isis = elephant_isis / ms
# print("{:45}".format("SpiNNaker mean ISI"), ":", np.mean(spinnaker_isis.ravel()))
# print("{:45}".format("SpiNNaker ISI std"), ":", np.std(spinnaker_isis.ravel()))
# print("{:45}".format("Elephant mean ISI"), ":", np.mean(elephant_isis.ravel()))
# print("{:45}".format("Elephant ISI std"), ":", np.std(elephant_isis.ravel()))

print("{:45}".format("Coefficient of Variation --  CV2=1 for a sequence of intervals generated by a Poisson process."))
print("{:45}".format("SpiNNaker cv2"), ":", np.mean(spinnaker_cvs.ravel()))
print("{:45}".format("SpiNNaker cv2 std"), ":", np.std(spinnaker_cvs.ravel()))
print("{:45}".format("Elephant cv2"), ":", np.mean(elephant_cvs.ravel()))
print("{:45}".format("Elephant cv2 std"), ":", np.std(elephant_cvs.ravel()))

print("{:45}".format("Fano factor F -- The higher F, the larger the cross-trial non-stationarity. "
                     "In theory for a time-stationary Poisson process, F=1."))
print("{:45}".format("SpiNNaker Fano factor"), ":", np.mean(spinnaker_ffs.ravel()))
print("{:45}".format("Elephant Fano factor"), ":", np.mean(elephant_ffs.ravel()))

# ensure we use viridis as the default cmap
plt.viridis()

# ensure we use the same rc parameters for all matplotlib outputs
mlib.rcParams.update({'font.size': 24})
mlib.rcParams.update({'errorbar.capsize': 5})
mlib.rcParams.update({'figure.autolayout': True})

# Save some figures
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 14), sharex=True, sharey=True)
spinn_hist = ax1.hist(spinnaker_isis.ravel(), bins=40, density=True)
ele_hist = ax2.hist(elephant_isis.ravel(), bins=40, density=True)
plt.xlabel("ISI (ms)")
plt.savefig("isi_distribution.pdf",
            bbox_inches='tight')
plt.savefig("isi_distribution.svg",
            bbox_inches='tight')
plt.close(fig)


p.end()
