import argparse

DEFAULT_FIGURE_FOLDER = "figures/"
DEFAULT_PREPROCESSING_FOLDER = "preproc/"
DEFAULT_RESULTS_FOLDER = "results_for_motion_detection/"

DEFAULT_N = 1
DEFAULT_NO_POPS = 16 * 49 * 24 * 5  # a cabinet
DEFAULT_NO_INJECTION_SITES = 5

DEFAULT_LOOPS = 1

parser = argparse.ArgumentParser(
    description='Module to analyse the quality of the topographic maps '
                'generated by SpiNNaker')
flags = parser.add_argument_group('flag arguments')
parser.add_argument('path', help='path of .npz archive', nargs='*')
parser.add_argument('-o', '--output', type=str,
                    help="name of the numpy archive storing simulation results",
                    dest='filename')
parser.add_argument('--fig_folder', type=str,
                    help="directory for figures",
                    dest='fig_folder', default=DEFAULT_FIGURE_FOLDER)
parser.add_argument('--results_folder', type=str,
                    help="directory for reading in results",
                    dest='results_folder', default=DEFAULT_RESULTS_FOLDER)
parser.add_argument('--preproc_folder', type=str,
                    help="directory for reading in results",
                    dest='preproc_folder',
                    default=DEFAULT_PREPROCESSING_FOLDER)
flags.add_argument('--plot', help="display plots",
                   action="store_true")

flags.add_argument('--snapshots', help="run snapshot analysis",
                   action="store_true")

# flag to force re-analysis
flags.add_argument('--no-cache', help="force simulation re-analysis without "
                                      "using cached information",
                   action="store_true", dest="no_cache")

# Scalability knobs

parser.add_argument('--no_pops', type=int,
                    default=DEFAULT_NO_POPS,
                    help='number of populations in the synfire chain'
                         ' -- [default {}]'.format(DEFAULT_NO_POPS))

parser.add_argument('--n', type=int,
                    default=DEFAULT_N,
                    help='number of neurons in a population in the synfire '
                         'chain'
                         ' -- [default {}]'.format(DEFAULT_N))

parser.add_argument('--no_injection_sites', type=int,
                    default=DEFAULT_NO_INJECTION_SITES,
                    help='number of spike injection locations in the synfire '
                         'chain (equally spread out)'
                         ' -- [default {}]'.format(DEFAULT_NO_INJECTION_SITES))

parser.add_argument('--no_loops', type=int,
                    default=DEFAULT_LOOPS,
                    help='number of times each population has to spike in '
                         'the simulation'
                         ' -- [default {}]'.format(DEFAULT_LOOPS))

args = parser.parse_args()
